Metodlar ve arayüzler
Bu bölüm, metodlar ("method"), arayüzler ("interface"), nesneleri ("object") ve nesnelerin davranış biçimlerini tanımlayan yapıları kapsıyor.

Go Yazarları Sunar
https://golang.org

* Metodlar

Go dilinde sınıf ("class") yapısı bulunmaz. Buna karşın veri türleri üzerinde metodlar tanımlayabilirsiniz.

Bir metod özel bir _alıcı_ ("receiver") argümana sahip bir fonksiyondur.

Metod alıcısı, `func` anahtar sözcüğü ve metod ismi arasında kendi argüman listesinde bulunur.

Bu örnekte `Abs` metodu `Vertex` türünde `v` isimli bir alıcıya sahiptir.

.play methods/methods.go

* Metodlar birer fonksiyondur

Unutmayın: bir metod, alıcı argümanı olan bir fonksiyondan ibarettir sadece.

İşlevsellikte herhangi bir değişiklik olmadan `Abs` metodu olağan bir fonksiyon olarak yazılırsa şöyle bir kod ortaya çıkar.

.play methods/methods-funcs.go

* Metodlar devam

Metod "struct" olmayan türler üzerinde de tanımlanabilir.

Bu örnekte `MyFloat` sayısal türü üzerinde tanımlanan bir `Abs` metodu görüyoruz.

Bir metod tanımlanırken metodun alıcısında bildirilen tür de aynı pakette tanımlı bulunmalıdır.
Alıcısının türü (`int` gibi yerleşik türler de dahil) bir başka pakette tanımlı bulunan bir metod tanımlayamazsınız.

.play methods/methods-continued.go

* Alıcısı işaretçi olan metodlar

Metodları işaretçi türünde alıcılarla tanımlayabilirsiniz.

Bunun anlamı, `T` bir veri türü olmak üzere metod alıcısı `*T` türündedir.  (Bununla birlikte, `T` türünün kendisi `*int` gibi bir işaretçi olamaz.)

Örneğin, `Scale` metodu burada `*Vertex` alıcısıyla tanımlanıyor.

Alıcısı işaretçi olan metodlar alıcının işaret ettiği değeri değiştirebilir (`Scale` metodunun burada yaptığı gibi).
Metodlar çoğunlukla alıcılarıyla aktarılan değerleri değiştirmeye ihtiyaç duyduklarından, işaretçi türünde alıcılar salt değer türünde alıcılara göre daha yaygındır.

`Scale` metodunun 16'ncı satırdaki bildiriminde görülen `*` karakterini silmeyi deneyin. Bakın programın davranışı nasıl değişiyor?

Alıcı bir işaretçi olmadığında, `Scale` metodu özgün `Vertex` değerinin bir kopyası üzerinde çalışır.
(Bu davranış diğer herhangi bir fonksiyon argümanı için geçerli olan davranışın aynısıdır.)
`Scale` metodu `main` fonksiyonu içinde bildirilen `Vertex` değerini değiştirmek için işaretçi türünde bir alıcıya sahip olmalıdır.

.play methods/methods-pointers.go

* İşaretçiler ve fonksiyonlar

Bu örnekte `Abs` ve `Scale` metodlarının birer fonksiyon olarak tekrar yazıldığını görüyoruz.

16'ncı satırdaki `*` karakterini silmeyi tekrar deneyin. Davranışın neden değiştiğini görebiliyor musunuz?
Örneğin derlenebilmesi için başka neleri değiştirmeniz gerekiyor?

(Emin değilseniz bir sonraki sayfaya devam edin.)

.play methods/methods-pointers-explained.go

* Metodlar ve işaretçi dolaylaması

Önceki iki programı karşılaştırdığınızda argümanı işaretçi olan fonksiyonlara çağrı sırasında birer işaretçi geçirmek gerektiğini:

	var v Vertex
	ScaleFunc(v)  // Derleme hatası!
	ScaleFunc(&v) // TAMAM

öte yandan alıcısı işaretçi olan metodların çağrı sırasında bir değer veya işaretçi kabul ettiğini farketmiş olabilirsiniz.

	var v Vertex
	v.Scale(5)  // TAMAM
	p := &v
	p.Scale(10) // TAMAM

Yukarıda `v.Scale(5)` deyiminde her ne kadar `v` işaretçi olmayan bir değer olsa da alıcısı işaretçi olan metod otomatik olarak çağrılır.
Yani Go, `v.Scale(5)` deyimini bir kolaylık olarak, `(&v).Scale(5)` olarak yorumlar; `Scale` metodunun alıcısı bir işaretçi olduğundan.

.play methods/indirection.go

* Metodlar ve işaretçi dolaylama (2)

Aynı davranış ters yönde de gerçekleşir.

Değer türünde argüman kabul eden fonksiyonlar çağrı sırasında ilgili türde bir değer alırken:

	var v Vertex
	fmt.Println(AbsFunc(v))  // TAMAM
	fmt.Println(AbsFunc(&v)) // Derleme hatası!

alıcısı (işaretçi değil de) değer olan metodlar çağrı sırasında bir değer veya işaretçi kabul ederler:

	var v Vertex
	fmt.Println(v.Abs()) // TAMAM
	p := &v
	fmt.Println(p.Abs()) // TAMAM

Bu örnekte, `p.Abs()` metod çağrısı `(*p).Abs()` olarak yorumlanır.

.play methods/indirection-values.go

* Metod alıcısı bir değer mi yoksa bir işaretçi mi olmalı?

Alıcı türü olarak bir işaretçi kullanmak için iki gerekçeniz olabilir.

İlki, metodun işaretçi alıcısının gösterdiği değeri değiştirilebilmek.
İkincisi, her metod çağrısında değer kopyalanmasından kaçınmak.

Örneğin alıcının büyük bir yapı (struct) olduğu durumlarda işaretçi kullanmak çok daha verimlidir.

Bu örnekte `Scale` ve `Abs` metodlarının her ikisi de `*Vertex` türünde metod alıcılarıyla tanımlanmıştır; her ne kadar `Abs` metodu alıcı işaretçiyle aktarılan değeri değiştirmiyor olsa da.

Genel olarak bir tür üzerindeki tüm metodlar bir değer veya işaretçi türünde metod alıcılarıyla tanımlanmalı, ama alıcı türü bu ikisinin bir karışımı olmamalıdır.
(Bunun nedenini ilerleyen sayfalarda göreceğiz.)

.play methods/methods-with-pointer-receivers.go

* Arayüzler

Bir _arayüz_türü_ ("interface type") bir grup metod başlığı ("signature") olarak tanımlanır.

Arayüz türünün değeri, o metodları gerçekleyen değerlerden herhangi birine sahip olabilir.

*Not:* Örnek kodun 22. satırında hata mevcut.  `Vertex` (değerin türü) `Abser` türünü gerçeklemiyor çünkü `Abs` metodu sadece `*Vertex` (işaretçi türü) üzerinde tanımlı.

.play methods/interfaces.go

* Arayüzler dolaylı olarak gerçeklenir

Bir tür, arayüz tarafından bildirilen metodları gerçeklemek suretiyle o arayüzü gerçekler.
Burada niyetin açık şekilde bildirilmesi söz konusu değildir; "implements" gibi bir anahtar terimin kullanılması gerekmez..

Dolaylı arayüzler ("implicit interfaces"), arayüz tanımını gerçeklemeden ayırır.  Gerçekleme özel bir ön düzenleme yapılmaksızın herhangi bir pakette bulunabilir.

.play methods/interfaces-are-satisfied-implicitly.go

* Arayüz değerleri

Arayüz değerleri perde arkasında, bir değer ("value") ve somut bir türden ("concrete type") oluşan bir çift şeklinde düşünülebilir.

	(değer, tür)

Bir arayüz değeri arkada arayüzü gerçekleyen somut türe ait bir değer barındırır.

Bir arayüz değeri üzerinden çağrılan bir metod arkadaki türe ait aynı isimli metodu çalıştırır.

.play methods/interface-values.go

* Nil arka değerli arayüz değerleri

Arayüzün kendi içindeki somut değer ("concrete value") "nil" ise metod, alıcısı "nil" olacak şekilde çağrılacaktır.

Bazı dillerde bu durum boş işaretçi istinası ("null pointer exception") üretir, Go'da ise (örnekteki `M` metodunda olduğu gibi) alıcının "nil" olması durumunu da incelikle yöneten metodlar yazmak sıkça rastlanan bir durumdur.

Somut değer olarak "nil" taşıyan bir arayüz değerinin kendisinin "nil" olmadığına dikkat edin.

.play methods/interface-values-with-nil.go

* "Nil" arayüz değerleri

Bir "nil" arayüz değeri ne bir değer ne de somut bir tür barındırır.

"nil" arayüz üzerinden metod çağırmak bir çalışma zamanı ("runtime") hatasıdır.
Zira arayüzü temsil eden "(değer, tür)" çiftinde herhangi bir tür bilgisi bulunmadığından somut olarak hangi metodun çağrılacağı bilinemez.

.play methods/nil-interface-values.go

* Boş arayüz

Herhangi bir metod belirtmeyen bir arayüz türü _boş_arayüz_ olarak tanınır:

	interface{}

Boş bir arayüz herhangi bir türde değerler barındırabilir.
(Her tür en azından "sıfır sayıda metodun gerçeklenmesi gerekir" koşulunu sağlar.)

Boş arayüzler bilinmeyen türde değerleri yöneten kodlarda kullanılır.
Örneğin, `fmt.Print` metodu `interface{}` türünde herhangi bir sayıda argüman kabul eder.

.play methods/empty-interface.go

* Tür onayları

Bir _tür_onayı_ ("type assertion") bir arayüz değerinin arkasındaki somut değere erişmeye olanak sağlar.

	t := i.(T)

Bu deyim `i` arayüz değerinin `T` somut türünü barındırdığını onaylar ve arka plandaki `T` türündeki değeri `t` değişkenine atar.

Eğer `i` arkada `T` türünde bir somut değer barındırmıyorsa, deyim bir çalışma zamanı hatası ("panic") üretir.

Bir arayüz değerinin belirli bir türü barındırıp barındırmadığını _sınamak_ için tür onayı iki değer döner: arkadaki değer ve onaylamanın başarılı olup olmadığını gösteren bir mantıksal değer.

	t, ok := i.(T)

Eğer `i` arkada `T` türünde bir somut değer barındırıyorsa, `t` bu arkadaki değer, `ok' ise "true" değerini alacaktır.

Aksi halde `ok` "false" değerini, `t` ise `T` türünün sıfır değerini alacak ve herhangi bir "panic" gerçekleşmeyecektir.

Bu sözdizimiyle, eşlemleri okurken kullanılan sözdizimi arasındaki benzerliğe dikkat edin.

.play methods/type-assertions.go

* Tür anahtarı

Bir _tür_anahtarı_ seri halde çok sayıda tür onayının yapılmasına olanak sağlayan bir yapıdır.

Tür anahtarı olağan bir "switch" deyimi gibi çalışır, fakat her bir durum ilgili (değerleri değil) türü belirtir ve bu türler arayüz değeriyle ilişkili türle karşılaştırılır.

	switch v := i.(type) {
	case T:
		// v burada T türünde
	case S:
		// v burada S türünde
	default:
		// uygun tür yok; v burada i ile aynı türde
	}

Bir tür anahtarında bildirim tür onayındaki `i.(T)` sözdizimiyle aynıdır, sadece `T` özel türünün yerini `type` anahtar kelimesi alır.

Bu "switch" deyimi `i` arayüz değerinin `T` veya `S` türünde değerler barındırıp barındırmadığını sınamaktadır.
Her bir `T` ve `S` durumunda `v` değişkeni sırasıyla `i` ile taşınan `T` veya `S` türünde bir değer alır.
Ön tanımlı durumda (uygun tür yoksa) `v` değişkeni `i` arayüz türüyle aynı tür ve değerde olur.

.play methods/type-switches.go

* Stringer

Sıklıkla rastlanan arayüzlerden biri de [[//golang.org/pkg/fmt/][`fmt`]] paketinde tanımlı [[//golang.org/pkg/fmt/#Stringer][`Stringer`]]dır.

	type Stringer interface {
		String() string
	}

`Stringer`  kendini bir dizgi ("string") olarak tanımlayan bir türdür. `fmt` paketi (ve bir çoğu) değerleri yazdırmak için bu arayüze bakarlar.

.play methods/stringer.go

* Alıştırma: Stringer

`IPAddr` türünün `fmt.Stringer` türünü gerçeklemesini sağlayarak tuttuğu adresi noktalı ve 4 bölme ayırarak yazmasını sağla.

Örneğin, `IPAddr{1,`2,`3,`4}`, `"1.2.3.4"` şeklinde yazdırılmalı.

.play methods/exercise-stringer.go

* Hatalar

Kendini bir hata dizgisiyle tarif edebilen her şey bir "hata"dır.

`error` türü, `fmt.Stringer` arayüzüne benzer yerleşik bir arayüzdür.

	type error interface {
		Error() string
	}

(`fmt.Stringer` arayüzünde olduğu gibi `fmt` paketindeki çeşitli çıktı rutinleri, bir `error` çıktısı istendiğinde onu nasıl sunacaklarını otomatik olarak bilir.)

Fonksiyonlar sıklıkla bir `error` değeri döndürür ve fonksiyonu çağıran kod, hata değerinin `nil` değerine eşit olup olmadığını kontrol ederek hataları yakalamalıdır.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("couldn't convert number: %v\n", err)
		return
	}
	fmt.Println("Converted integer:", i)

nil `error` değeri fonksiyonun başarı ile sonlandığını belirtirken; nil harici bir `error` değeri fonksiyonun başarısızlıkla sonlandığını belirtir.

.play methods/errors.go

* Alıştırma: Hatalar

[[/flowcontrol/8][Önceki alıştırmada]] kullandığınız `Sqrt` fonksiyonunuzu kopyalayın ve onu bir `error` (hata) değeri döndürecek şekilde düzenleyin.

`Sqrt` fonksiyonunuz negatif bir sayı verildiğinde, tıpkı kompleks sayıları desteklemediğinde yapacağı gibi, nil olmayan bir hata mesajı döndürmelidir.

Yeni bir tür oluşturun

	type ErrNegativeSqrt float64

ve ona

	func (e ErrNegativeSqrt) Error() string

metodunu ekleyerek `error` üretebilecek hale getirin. Örneğin; `ErrNegativeSqrt(-2).Error()` metodunun `"Negatif`sayıların`karekökü`alınamaz:`-2"` döndürmesi gibi.

*Not:* `Error` metodunun içindeki `fmt.Print(e)`'e yapılan bir çağrı, programı sonsuz bir döngüye sokacaktır. `e` değerini öncelikle dönüştürerek bunu önleyebilirsiniz: `fmt.Print(float64(e))`. Neden?

`Sqrt` fonksiyonunuzu, bir negatif sayı verildiğinde `ErrNegativeSqrt` değerini döndürecek biçimde değiştirin.

.play methods/exercise-errors.go

* Okuyucular

`io` paketi veri akışının sonunu okuyan `io.Reader` arayüzünü kapsar.

Go standart kütüphanesi bu çeşit [[https://golang.org/search?q=Read#Global][birçok okuyucu arayüz gerçeklemesine]] sahiptir: dosyalar, ağ bağlantıları, sıkıştırıcılar, şifreler ve diğerleri.

`io.Reader` arayüzü `Read` metoduna sahiptir:

	func (T) Read(b []byte) (n int, err error)

`Read` metodu, kendisine verilen byte dilimi ile veri üretir ve üretilen verinin kaç byte olduğu ile hata değerini döner. Eğer veri akışı sonlanmışsa `io.EOF` hatası döner.

Örnek kod bir [[//golang.org/pkg/strings/#Reader][`strings.Reader`]] oluşturuyor ve tek seferde 8 baytlık çıktı işliyor.

.play methods/reader.go

* Alıştırma: Okuyucular

Sınırsız ASCII `'A'` karakter akışı sağlayan bir `Reader` türü gerçekleyin.

.play methods/exercise-reader.go

* Alıştırma: Rot13 Okuyucu

En yaygın tasarım desenlerinden biri [[https://golang.org/pkg/io/#Reader][io.Reader]]'ın başka bir `io.Reader` sarmalayıp, akışı bir şekilde düzenlemesidir.

Örneğin, [[https://golang.org/pkg/compress/gzip/#NewReader][gzip.NewReader]] fonksiyonu bir `io.Reader` alır ("gzip"lenmiş verinin bir parçası) ve onu aynı zamanda `io.Reader` gerçekleyen (açılmış verinin bir parçası) bir `*gzip.Reader` döndürür.

[[https://en.wikipedia.org/wiki/ROT13][ROT13]] algoritmasını kullanarak alfabedeki tüm harfleri veri akışını değiştirerek şifreleyen, `io.Reader` akımından okuyup yine `io.Reader` akımına yazan bir `rot13Reader` gerçekleyin.

`rot13Reader` türünü sizin için sunduk. `Read` metodunu gerçekleyerek onu bir `io.Reader` haline getirin.

.play methods/exercise-rot-reader.go

* Görüntüler

[[https://golang.org/pkg/image/#Image][image paketi]] `Image` arayüzünü tanımlar:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Not*: `Bounds` metodunun `Rectangle` dönüş değeri, aslında `image` paketinde tanımlandığı üzere, [[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]]dır.

(Ayrıntılar için [[https://golang.org/pkg/image/#Image][bu dokümana]] göz atın.)

Ayrıca, `color.Color` ve `color.Model` de birer arayüzdür; fakat öntanımlı `color.RGBA` ve `color.RGBAModel` gerçeklemelerini kullanarak bunu görmezden geleceğiz. Bu arayüz ve türler [[https://golang.org/pkg/image/color/][image/color paketinde]] tanımlanmıştır.

.play methods/images.go

* Alıştırma: Görüntüler

Daha önceden yazdığınız resim üretici hatırladınız mı? Hadi bir tane daha yazalım ama bu defa bir veri dilimi döndürmek yerine `image.Image` gerçeklemesi döndürsün.

Kendi `Image` tipinizi tanımlayın, [[https://golang.org/pkg/image/#Image][gerekli metodları]] gerçekleyin ve `pic.ShowImage` metodunu çağırın.

`Bounds`, `image.Rect(0,`0,`w,`h)` gibi bir `image.Rectangle` döndürmelidir.

`ColorModel`, `color.RGBAModel` döndürmeli.

`At` bir renk döndürmelidir; son resim üreticisindeki `v` değeri bu defa `color.RGBA{v,`v,`255,`255}` değerine denk gelmelidir.

.play methods/exercise-images.go

* Tebrikler!

Bu dersin sonuna geldiniz!

Daha neler öğreneceğinizi görmek için [[/list][bölüm listesine]] geri dönün ya da [[javascript:click('.next-page')][bir sonraki derse]] geçin.
