Diğer türler: yapı ("struct"), dilim ("slice") ve eşlem ("map")
Varolan türleri temel alarak tür tanımlamayı öğrenin: bu bölüm yapılar ("struct"), diziler ("array"), dilimler ("slice") ve eşlemleri ("map") kapsar.

Go Yazarları Sunar
http://golang.org

* İşaretçiler

Go dilinde işaretçiler ("pointer") mevcuttur.
İşaretçi değişkenin bellekteki adresini tutar.

`*T`, `T` değerini gösteren bir türdür. Sıfır değeri olarak `nil` kullanılır.

	var p *int

`&` operatörü başına geldiği terimi gösteren bir gösterici oluşturur.

	i := 42
	p = &i

`*` operatörü, göstericinin gösterdiği değişkenin değerini gösterir.

	fmt.Println(*p) // p göstericisi üzerinden i'nin değerini oku
	*p = 21         // p göstericisi üzerinden i'ye değer ata

Buna dolaylı yoldan erişim denir.

C dilinin aksine, Go dilinde gösterici aritmetiği desteklenmez.

.play moretypes/pointers.go

* Yapılar

Struct ("yapı"), alanlardan oluşan bir veri topluluğudur.

(`type` bildirimi yapı ("struct") oluşturmaya yarar.)

.play moretypes/structs.go

* Yapı Alanları

Yapı alanlarına nokta kullanılarak erişilir.

.play moretypes/struct-fields.go

* Yapı Göstericileri

Yapı alanlarına yapı göstericisi ile erişilebilir.

Gösterici üzerinden yapılan dolaylama belirgindir.

.play moretypes/struct-pointers.go

* Yapı Değerleri

Bir yapı değeri ("struct literal"), henüz bellek ayrılmış yeni bir yapı değerini, alanlarının değerlerini listeleyerek belirtir.

`Name:` sözdizimini kullanarak yalnızca alt alanları listeleyebilirsiniz (alan sırası önemli değil)

Özel `&` ön eki, henüz bellek ayrılmış yeni bir yapı için bir işaretçi oluşturur.

.play moretypes/struct-literals.go

* Diziler

`[n]T` türü `T` türündeki `n` tane değerden oluşan bir dizidir.

	var a [10]int

ifadesi 10 tamsayıdan oluşan dizi türünde bir `a` değişkeni bildirir.

Dizinin uzunluğu tür bildiriminin bir parçası olduğundan dizi bir kere
tanımlandıktan sonra yeniden boyutlandırılamaz.
Bu bir kısıtlama gibi görünüyor, fakat endişe etmeyin;
Go dizilerle çalışmak için daha uygun bir yol sunuyor.

.play moretypes/array.go

* Dilimler

Dilim ("slice"), bir değer dizisine işaret eder.  Dilimde dizi uzunluğu bilgisi de mevcuttur.

`[]T`, `T` türünde elemanları olan bir dilimdir.

.play moretypes/slices.go

* Dilimleri dilimlemek

Bir dilim, aynı diziyi işaret eden yeni bir dilim değeri oluşturmak için yeniden dilimlenebilir.

	s[lo:hi]

ifadesi, `lo` değerinden `hi-1` değerine kadar olan elemanları (`hi-1` dahil) ifade eder. Buna göre;

	s[lo:lo]

dilimi boştur,

	s[lo:lo+1]

dilimi ise bir elemana sahiptir.

.play moretypes/slicing-slices.go

* Dilim oluşturmak

Dilimler `make` fonksiyonu ile oluşturulur. `make` fonksiyonu bellekte sıfırlanmış bir dizi ayırır ve bu diziyi işaret eden bir dilim döndürür:

	a := make([]int, 5)  // len(a)=5

Kapasite belirtmek için, `make` fonksiyonuna üçüncü bir argüman geçirin:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go

* Boş dilimler

Boş bir dilim `nil` değerini alır.

Boş ("nil") bir dilimin uzunluk ve kapasite değeri 0'dır.

(Dilimler hakkında daha fazla bilgi için [[http://golang.org/doc/articles/slices_usage_and_internals.html][Dilimler: kullanım ve detaylar]] makalesine bakın.)

.play moretypes/nil-slices.go

* Dilime eleman ekleme

Go, dilimlere yeni eleman eklemeye yarayan yerleşik `append` fonksiyonunu sunar.
[[http://golang.org/pkg/builtin/#append][Dokümantasyonda]],
yerleşik üyelerin bulunduğu `builtin` paketindeki `append` fonksiyonu
şöyle tanımlanmıştır:

	func append(s []T, vs ...T) []T

`append` fonksiyonunun ilk parametresi olan `s` `T` türünden bir dilimdir ve
geri kalan diğer tüm `T` dilimleri bu dilime eklenir.

`append` fonksiyonu, fonksiyona ilk giren dilim değeri ve
diğer eklenen dilim değerlerinin hepsini içeren bir dilim döndürür.

Eğer `s` dizisinin değeri girilen değerleri saklayamayacak kadar küçük ise
daha büyük bir dizi alanı ayrılır ve fonksiyonun döndürdüğü dilim yeni ayrılmış alanı
gösterir.

(Dilimler hakkında daha çok şey öğrenmek için [[http://golang.org/doc/articles/slices_usage_and_internals.html][Dilimler: kullanım ve detayları]] makalesini okuyunuz.)

.play moretypes/append.go

* Range

`for` döngüsünün `range` ("aralık") formu ile bir dilim ("slice") veya eşlem ("map") üzerinde dolaşılır.

.play moretypes/range.go

* Range devam

Değer dizisinin indislerini ya da o indise karşılık gelen değerleri `_` ataması ile atlayabilirsiniz.

Eğer yalnızca indisi kullanmak istiyorsanız ", value" kısmını tamamen çıkarınız.

.play moretypes/range-continued.go

* Alıştırma: Dilimler

`Pic` fonksiyonunu gerçekleyin. Fonksiyonunuz, `dx` 8 bitlik işaretsiz bir tamsayı olmak üzere, her bir elemanı `dx` elemanlı dilimlerden oluşan `dy` uzunluğunda bir dilim döndürmelidir. Program çalıştırıldığında, tamsayılar grilik ölçeğine (veya mavilik ölçeğine) karşı düşen değerler olarak yorumlanarak bir resim görüntülenecektir.

Resim seçimi size ait. Kullanabileceğiniz bazı ilginç işlemler: `x^y`, `(x+y)/2` ve `x*y`.

(`[][]uint8` içerisindeki her `[]uint8` dilimine bellek ayırmak için döngü kullanmanız gerekmektedir.)

(Türler arasında dönüşüm yapmak için `uint8(intValue)` ifadesini kullanın.)

.play moretypes/exercise-slices.go

* Eşlemler

Bir eşlem ("map"), anahtarları ("keys") değerlere ("values") eşler.

Eşlemler kullanılmadan önce mutlaka `make` ile yaratılmalıdır (`new` ile değil!); `nil` değerinde bir eşlem boştur ve atanamaz.

.play moretypes/maps.go

* Eşlem değerleri

Eşlem değerleri ("map literals") yapı değerleriyle ("struct literals") benzerlik gösterir; fakat anahtar kullanımı zorunludur.

.play moretypes/map-literals.go

* Eşlem değerleri devam

Eğer tepe seviyedeki tür yalnızca bir tür adı ise, bunu atlayabilirsiniz.

.play moretypes/map-literals-continued.go

* Eşlemleri değiştirme

`m` eşlemine bir eleman ekle ya da varolan bir elemanı değiştir:

	m[key] = elem

Bir elemana eriş:

	elem = m[key]

Bir eleman sil:

	delete(m, key)

Anahtarın mevcut olup olmadığını iki-değerli atama ile sına:

	elem, ok = m[key]

Eğer `key`, `m` içindeyse `ok`, `true` değerini alır. Aksi halde `ok`, `false` değerini; `elem`, eşlemin eleman türü için belirlenmiş sıfır değerini ("zero value") alır.

Benzer şekilde, bir eşlemden değer okurken eğer anahtar mevcut değilse okunmak istenen değer eşlemin eleman türü için belirlenmiş sıfır değerini alır.

.play moretypes/mutating-maps.go

* Alıştırma: Eşlemler

`WordCount` fonksiyonunu gerçekleyin. Fonksiyonunuz `s` dizgisinin içerisindeki her bir “kelime” adedi için bir eşlem döndürmelidir. `wc.Test` fonksiyonu, fonksiyonunuzu test edecek ve fonksiyonunuzun başarılı ya da başarısız olduğunu çıktı olarak verecektir.

[[http://golang.org/pkg/strings/#Fields][strings.Fields]] size yardımcı olabilir.

.play moretypes/exercise-maps.go

* Fonksiyon değerleri

Fonksiyonlar da birer değerdir.

.play moretypes/function-values.go

* Fonksiyon kaplamları

Go fonksiyonları kaplam ("closure") olabilirler. Kaplam, kendi bloğunun dışındaki değişkenlere erişen bir fonksiyon değeridir. Fonksiyon bu değerlere erişip atama yapabilir; yani bir bakıma bu fonksiyon o değerler ile aynı kapsamdadır.

Bu örnekte; `adder` fonksiyonu bir kaplam döndürür. Her kaplam kendi `sum` değişkeni ile aynı kapsamdadır.

.play moretypes/function-closures.go

* Alıştırma: Fibonacci kaplamı

Hadi fonksiyonlar ile biraz eğlenelim.

Öyle bir `fibonacci` fonksiyonu tasarlayın ki ardışık Fibonacci sayıları döndüren bir fonksiyon (kaplam) döndürsün.

.play moretypes/exercise-fibonacci-closure.go

* Tebrikler!

Bu dersin sonuna geldiniz!

Daha neler öğreneceğinizi görmek için [[/list][bölüm listesine]] geri dönün ya da [[javascript:click('.next-page')][bir sonraki derse]] geçin.
