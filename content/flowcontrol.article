Akış kontrol deyimleri: for, if, else ve switch
Kodunuzun akışını koşullar, döngüler ve switchler ile nasıl kontrol edeceğinizi öğrenin.

Go Yazarları Sunar
http://golang.org

* For

Go dilinde döngü yapısı olarak sadece `for` mevcuttur.

`for` döngüsü C ya da Java'dakiyle benzer yapıdadır; ancak `(`)`  yani parantezler kullanılmaz (opsiyonel bile değildir) ve `{`}` yani süslü parantez kullanılması şarttır.

.play flowcontrol/for.go

* For devam

Tıpkı C ve Java'daki gibi ön (birinci) ve son (üçüncü) deyimleri boş bırakabilirsiniz.

.play flowcontrol/for-continued.go

* For, Go'nun "while"ıdır

Bu aşamada `for` daki noktalı virgülleri de bir köşeye atabilirsiniz: C'deki `while` 'ın karşılığı Go'da `for` 'dur.

.play flowcontrol/for-is-gos-while.go

* Sonsuza dek

Eğer döngü koşulunu belirtmezseniz, sonsuz döngü oluşacaktır.

Sonsuzluğu küçücük bir alana sığdırdık.

.play flowcontrol/forever.go

* If

`if` koşulu C ve Java'dakiyle benzer yapıdadır; ancak `(`)` (parantezler) kullanılmaz ve `{`}` (süslü parantez) kullanılması zorunludur.

(Tanıdık mı geldi?)

.play flowcontrol/if.go

* Kısa bir deyim ile if kullanımı

`for` 'da olduğu gibi, `if` deyimi de koşuldan önce çalıştırılacak kısa bir deyim ile başlayabilir.

Bu kısa deyimde belirtilen değişkenler, `if` koşulunun kapsamı içinde geçerlidir.

(En sondaki return deyiminde `lim` yerine `v` kullanmayı deneyin.)

.play flowcontrol/if-with-a-short-statement.go

* If ve else

`if` 'in kapsamında geçerli olan kısa atama ile atanan değişkenler, `else` blokları içinde de geçerlidir.

.play flowcontrol/if-and-else.go

* Alıştırma: Döngüler ve Fonksiyonlar

Karekök alma fonksiyonunu Newton metoduyla gerçekleyin.

Newton metodunda; bir _z_ başlangıç noktası seçilir ve

.image /content/img/newton.png

formülünü tekrarlayarak `Sqrt(x)` ("karekök x") değerine yaklaşılır.

Başlangıç olarak bu hesaplamayı 10 defa tekrar edin ve (1, 2, 3, ...) çeşitli değerlerle cevaba ne kadar yaklaştığınızı görün.

Daha sonra döngü koşulunu, sonuç değeri değişmeyi bıraktığında (ya da çok küçük bir fark ile değiştiğinde) döngünün durmasını sağlayacak şekilde düzenleyin. Döngünün daha fazla veya daha az çalışıp çalışmadığına bakın. [[http://golang.org/pkg/math/#Sqrt][Math.sqrt]] fonksiyonunun verdiği sonuca ne kadar yakın bir cevap elde ettiniz?

İpucu: bir kayan noktalı sayı değeri ("floating point value") bildirmek ve ilklendirmek için ya kayan noktalı sayı bildirimi sözdizimini kullanın ya da dönüştürme işlemi uygulayın:

	z := float64(1)
	z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Muhtemelen `switch` (anahtarlama) deyiminin neye benzediğini biliyorsunuzdur.

`fallthrough` deyimi ile sonlanana kadar, `case` gövdesi otomatik olarak sonlanacaktır.

.play flowcontrol/switch.go

* Switch değerlendirme sırası

"Switch" deyiminde "case"ler yukarıdan aşağıya değerlendirir ve "case"lerden biri doğrulandığında değerlendirme sonlanır.

(Örneğin,

	switch i {
	case 0:
	case f():
	}

eğer `i==0` ise `f` 'yi çağırmaz.)

#appengine: *Not:* Go Playground'ta zaman her daim 2009-11-10 23:00:00 UTC'den başlar,
#appengine: bu değerin önemi okuyucu için bir alıştırma niteliğinde olmasıdır.

.play flowcontrol/switch-evaluation-order.go

* Koşulsuz Switch

Koşul belirtilmemiş bir `switch` deyimi, `switch`true` deyimiyle eşdeğerdir.

Bu yapı uzun "if-then-else" zincirleri yerine kullanılabilecek temiz bir yöntemdir.

.play flowcontrol/switch-with-no-condition.go

* Defer

defer deyimi, kendisini çevreleyen fonksiyon dönene kadar fonksiyonun çalışmasını erteler.

Ertelenmiş fonksiyon çağrısının argümanları anında değerlendirilir, fakat fonksiyon çağrısı
kendisini çevreleyen fonksiyon dönmeden işleme sokulmaz.

.play flowcontrol/defer.go

* Stacking defers

Ertelenmiş fonksiyon çağrıları yığının tepesine yerleştirilir. Bir fonksiyon döndüğü zaman,
onun çevrelediği ertelenmiş fonksiyonlar son-giren-ilk-çıkar (LIFO) sırasına göre çağrılır.

defer deyimleri hakkında daha fazlasını öğrenmek için şu
[[http://blog.golang.org/defer-panic-and-recover][blog yazısını]]
okuyunuz.

.play flowcontrol/defer-multi.go

* Tebrikler!

Bu dersin sonuna geldiniz!

Daha neler öğreneceğinizi görmek için [[/list][bölüm listesine]] geri dönün ya da [[javascript:click('.next-page')][bir sonraki derse]] geçin.
