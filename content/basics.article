Paketler, değişkenler ve fonksiyonlar.
Bir programının temel bileşenlerini öğrenin.

Go Yazarları Sunar
http://golang.org

* Paketler

Her Go programı paketlerden oluşur.

Programlar `main` paketinde çalışmaya başlar.

Bu örnek program `"fmt"` ve `"math/rand"` paketlerinin yolunu içe aktararak ("import") kullanıyor.

Geleneksel olarak, paket isimleri import yolunun son elementi ile isimlendirilir. Örneğin, `"math/rand"` paketi, `package`rand` deyimi ile başlayan dosyaları kapsar.

#appengine: *Not:* Bu programların yürütüldüğü ortamda rastgelelik olmadığı için,
#appengine: `rand.Intn` her zaman aynı sayıyı döndürecektir.
#appengine:
#appengine: (Farklı bir sayı görmek için, sayı üreticisini besleyin; bkz. [[http://golang.org/pkg/math/rand/#Seed][`rand.Seed`]])

.play basics/packages.go

* İçe Aktarımlar

Bu kod, içe aktarılan paketleri, parantezlenmiş ve parçalara ayrılmış import deyimi şeklinde gruplar.

Ayrıca çoklu import deyimleri de kullanabilirsiniz:

	import "fmt"
	import "math"

Fakat parçalara ayrılmış import deyimi kullanımı daha güzel bir görünüm sunar.

.play basics/imports.go

* Dışa Aktarılan İsimler

Bir paketi içe aktardıktan sonra, bu pakette dışa aktarılmış isimleri kullanabilirsiniz.

Go'da, dışa aktarılmış bir isim büyük harf ile başlar.

Tıpkı `FOO` gibi `Foo` da dışa aktarılmış bir isimdir. `foo` ise dışa aktarılmış bir isim değildir.

Yandaki kodu çalıştırın. Sonra `math.pi` yi  `math.Pi` şeklinde değiştirip yeniden çalıştırın.

.play basics/exported-names.go

* Fonksiyonlar

Bir fonksiyon bir veya birden fazla sayıda argüman alabileceği gibi hiç argüman almayabilir.

Bu örnekte, `add` fonksiyonu `int` türünde iki parametre alıyor.

Değişken türünün değişken adından _sonra_ geldiğine dikkat edin.

(Değişken türlerinin neden bu şekilde tanımlandıkları hakkında daha fazla bilgi için; [[http://golang.org/doc/articles/gos_declaration_syntax.html][Go dilinde bildirim sözdizimi]] makalesine bakın.)

.play basics/functions.go

* Fonksiyonlar devam

İki ya da daha fazla ardışık fonksiyon parametresi aynı türde ise tür bilgisini, en sonda bulunan hariç, diğer parametreler için belirtmeseniz de olur.

Bu örnekte

	x int, y int

fonksiyon parametrelerini şöyle kısalttık:

	x, y int

.play basics/functions-continued.go

* Çoklu sonuçlar

Bir fonksiyon herhangi bir sayıda sonuç döndürebilir.

Örnekteki `swap` fonksiyonu, dizgi ("string") türünde iki sonuç döndürüyor.

.play basics/multiple-results.go

* Adlandırılmış sonuçlar

Go'nun sonuç değerleri aynı bir değişken gibi adlandırılabilir ve davranır.

Sonuçlar manalarına, işlevlerine göre adlandırılmalıdır.

Argümansız bir `return` deyimi sonuçların o anki değerlerini döndürür. Bu "çıplak" return olarak bilinir.

Çıplak return deyimleri, aynı örnekteki gibi, sadece kısa fonksiyonlarda kullanılmalıdır. Uzun fonksiyonlarda kullanılırlarsa kodun okunabilirliğini azaltırlar.

.play basics/named-results.go

* Değişkenler

`var` deyimi değişkenler tanımlamaya yarar. Ve tıpkı fonksiyon argümanlarında olduğu gibi tür bilgisi sona yazılır.

`var` deyimi paket veya fonksiyon düzeyinde olabilir. Biz bu örnekte ikisini de görüyoruz.

.play basics/variables.go

* Değişkenleri ilklendirme

Bir `var` deyimi her bir değişken için bir ilklendirme değeri içerebilir.

Eğer bir ilklendirme mevcut ise tür tanımlaması atlanabilir.  Bu halde değişken, ilklendirme değeri ile aynı türde olacaktır.

.play basics/variables-with-initializers.go

* Kısaltılmış değişken bildirimleri

Bir fonksiyon içerisinde, türü belirtilmiş bir `var` bildirimi yerine `:=` kısa atama deyimi kullanılabilir.

Fonksiyon alanının dışında, her yapı bir anahtar kelime (`var`, `func` vs.) ile başlar ve `:=` yapısını kullanmak mümkün değildir.

.play basics/short-variable-declarations.go

* Basit türler

Go'nun basit türleri şunlardır

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // diğer adıyla uint8

	rune // diğer adıyla int32
	     // Unicode karakter kodlarını ifade eder

	float32 float64

	complex64 complex128

Bu örnekte birçok çeşit türden değişken tanımlanmıştır.
Değişken tanımlamaları, import deyiminde de, olduğu gibi bloklara ayrılmış olarak yapılabilir.

.play basics/basic-types.go

* Sıfır değerleri

İlklendirilmemiş her değişken başlangıç değeri olarak kendi
_sıfır_değeri_ni alır.

Sıfır değerleri şunlardır:
- Sayı türleri için `0`,
- boolean türü için `false` ve
- string türü için `""`.

.play basics/zero.go

* Tür dönüşümleri

`T(v)` ifadesi `v` değerini `T` türüne dönüştürür.

Bazı sayısal dönüşümler:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Veya basitçesi:

	i := 42
	f := float64(i)
	u := uint(f)

Go'da türdeş olmayan ögeler arasında gerçekleşen atamalarda, C dilinden farklı
olarak, açık dönüşüm yapılması gerekir.
Örnekteki `float64` veya `int` dönüşümlerini kaldırmayı deneyin ve ne olduğunu
gözlemleyin.

.play basics/type-conversions.go

* Tür çıkarımı

Eğer bir değişken türü belirtilmeden tanımlanırsa (yani tür belirtilmeden `var` kullanımı veya `:=` sözdizimi kullanılarak), değişkenin türünü sağ taraftaki değer belirler.

Tanımlamanın sağ tarafı türü belirli olan bir değişken ise, yeni değişkenimiz bu tür ile aynı türe sahip olur:

	var i int
	j := i // j int türünden olur

Fakat sağ taraf türü belirtilmemiş bir sayısal sabit ise, yeni değişken sabitin hassasiyet seviyesine göre `int`, `float64` veya `complex128` türlerinden biri olarak belirlenir:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Örnek koddaki `v` değerinin başlangıç değerini değiştirin ve girdiğiniz değerlerin türün belirlenmesindeki etkisini gözlemleyin.

.play basics/type-inference.go

* Sabitler

Sabitler de değişkenler ile aynı şekilde bildirilir ancak sabitler bildirilirken `const` anahtar kelimesi kullanılır.

Sabitler; karakter, dizgi ("string"), mantıksal ("boolean") ya da sayısal değerler alabilir.

Sabitler `:=` operatörü kullanılarak bildirilemezler.

.play basics/constants.go

* Sayısal Sabitler

Sayısal sabitler yüksek hassasiyetli _değerlerdir_.

Tür bilgisi olmayan bir sabit, bağlamının gerektirdiği "tür"den olur.

`needInt(Big)` yazdırmayı da deneyin.

.play basics/numeric-constants.go

* Tebrikler!

Bu dersin sonuna geldiniz!

Daha neler öğreneceğinizi görmek için [[/list][bölüm listesine]] geri dönün ya da [[javascript:click('.next-page')][bir sonraki derse]] geçin.
