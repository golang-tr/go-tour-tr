Eşzamanlılık
Go, eşzamanlılık özelliklerini dilin temel bir parçası olarak sunar. Bu bölüm, dilin sunduğu eşzamanlılık özelliklerini ve bunların nasıl kullanılacağını örnekler ile açıklar.

Go Yazarları Sunar
https://golang.org

* Goroutine

Bir _goroutine_ Go tarafından çalışma zamanında yönetilen hafif bir iş parçacığıdır ("lightweight thread").

	go f(x, y, z)

çağrısı

	f(x, y, z)

fonksiyonunu çalıştıran yeni bir goroutine başlatır.

`f`, `x`, `y` ve `z` ifadelerinin değerlendirilmesi mevcut "goroutine"de, `f` fonksiyonunun çalıştırılması ise yeni bir "goroutine"de gerçekleşir.

Gorutinleri aynı adres uzayında çalışır, bu yüzden paylaşılmış bellek erişimi mutlaka eşzamanlanmalıdır. [[https://golang.org/pkg/sync/][`sync`]] paketi
yararlı bazı eşzamanlama ilkelleri sağlar; bununla birlikte Go'da bulunan diğer eşzamanlama ilkelleri sayesinde buna çok ihtiyaç duymayacaksınız. (Bir sonraki slayta bakın.)

.play concurrency/goroutines.go

* Kanallar

Kanallar ("channels"), `<-` kanal operatörü vasıtası ile değer gönderip alabildiğiniz bir veri hattıdır.

	ch <- v    // v'yi ch kanalına yolla.
	v := <-ch  // ch'den al ve
	           // değeri v'ye ata.

(Veri akışı ok yönünde gerçekleşir.)

Tıpkı eşlemler ve dilimler gibi kanallar da kullanılmadan önce oluşturulmalıdır:

	ch := make(chan int)

Varsayılan olarak, veri gönderimleri ve alımları diğer taraf hazır olana kadar bloklanır. Bu, "goroutine"lerin açık kilitler ("explicit locks") veya koşul değişkenleri ("conditional variables") kullanmadan eşzamanlanmasını sağlar.

Örnek kod, dilimdeki sayıların toplamını hesap yükünü iki gorutinine paylaştırarak hesaplar.
Her iki gorutin de işlerini tamamladığında nihai sonuç hesaplanır.

.play concurrency/channels.go

* Tamponlanmış Kanallar

Kanallar _tamponlanabilir_. Tamponlanmış bir kanalı ilklendirmek için `make` fonksiyonunun ikinci parametresine tampon ("buffer") uzunluğunu girin:

	ch := make(chan int, 100)

Tamponlanmış bir kanala veri gönderimleri, sadece tampon tamamen dolu olduğunda durur. Tamponlanmış bir kanaldan veri alımları ise tampon tamamen boş olduğunda durur.

Örneğin tamponu gereğinden fazla dolacak şekilde düzenleyip, ne olduğunu gözlemleyin.

.play concurrency/buffered-channels.go

* Range ve Close

Gönderici bir kanaldan daha fazla değer gönderilmeyeceğini belirtmek adına `close` yerleşik fonksiyonu ile bu kanalı kapatabilir. Alıcılar, alıcı ifadeye ikinci bir parametre ataması yaparak kanalın kapalı olup olmadığını öğrenebilir:

	v, ok := <-ch

Eğer alınacak başka değer kalmamış ve kanal kapatılmışsa `ok` değişkeni `false` değerini alacaktır.

`for`i`:=`range`c` döngüsü kanal kapanana kadar kanaldan tekrar tekrar değer alır.

*Not:* Yalnızca gönderen kanalı kapatmalıdır, alıcı asla kapatmamalıdır. Kapalı kanala bir şeyler göndermek "paniğe" yol açacaktır.

*Başka*bir*not*: Kanallar dosyalar gibi değildir; kapatmanız genellikle gerekmez. Kapatma işlemi yalnızca alıcıya daha başka değer gelmeyeceğini bildirmek maksadıyla yapılır, tıpkı bir `range` döngüsünü sonlandırmak gibi.

.play concurrency/range-and-close.go

* Select

`select` deyimi bir "goroutine"nin birden fazla iletişim işleminde beklemesine izin verir.

Bir `select`, `case` yollarından biri çalışabilir hale gelinceye dek bloke eder. Eğer birden fazla çalıştırılabilir `case` varsa aralarından rastgele birini seçer.

.play concurrency/select.go

* Varsayılan Select

Eğer hazırda başka `case` yoksa `select` içerisindeki `default` çalıştırılır.

Bloklanmadan veri alma ya da gönderme yapmak için `default` kullanın:

	select {
	case i := <-c:
		// i'yi kulllan
	default:
		// c'den almak bloklamalıydı
	}

.play concurrency/default-selection.go

* Alıştırma: Eşdeğer İkili Ağaçlar

Aynı sıralı değerlerin tutulduğu yapraklara sahip çok sayıda farklı ikili ağaçlar olabilir. Örneğin burada 1, 1, 2, 3, 5, 8, 13 sıralı değerlerini tutan
iki adet ikili ağaç var:

.image /content/img/tree.png

Çoğu dilde, iki adet ikili ağacın verileri aynı sırada tutup tutmadığını kontrol eden fonksiyonu gerçeklemek bir hayli karışıktır. Basit bir çözüm sunabilmek adına Go'nun eşzamanlılığını ve kanallarını kullanacağız.

Bu örnek aşağıdaki türü tanımlayan `tree` paketini kullanır:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}

Açıklamaya [[javascript:click('.next-page')][sonraki sayfada]] devam edin.

* Alıştırma: Eşdeğer İkili Ağaçlar

*1.* `Walk` fonksiyonunu gerçekleyin.

*2.* `Walk` fonksiyonunu test edin.

`tree.New(k)` fonksiyonu `k`, `2k`, `3k`, ..., `10k` değerlerini tutarak rastgele yapılandırılmış bir ikili ağacı inşa eder.

`ch` adında yeni bir kanal oluşturun ve `Walker` fonksiyonunu bu kanalda başlatın:

	go Walk(tree.New(1), ch)

Daha sonra kanaldan 10 değer okuyun ve bunları yazdırın. Değerler 1, 2, 3, ..., 10 olmalı.

*3.* `t1` ve `t2` ağaçlarının aynı değerleri saklayıp saklamadığını belirleyebilmek adına `Same` fonksiyonunu `Walk` kullanarak gerçekleyin.

*4.* `Same` fonksiyonunu test edin.

`Same(tree.New(1),`tree.New(1))` true ve `Same(tree.New(1),`tree.New(2))` false döndürmelidir.

`Tree` dokümanlarına [[https://godoc.org/golang.org/x/tour/tree#Tree][şuradan]] erişebilirsiniz.

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Kanalların gorutinler arasındaki haberleşmeyi harika şekilde nasıl sağladığını görmüştük.

Peki ya haberleşmeye ihtiyacımız yoksa? Ya tek istediğimiz bir değişkene, çakışmalardan sakınmak için, aynı anda sadece bir gorutinin erişmesini sağlamak ise?

Bu mekanizmaya _karşılıklı dışlama_ ("mutual exclusion") denilmekte ve mekanizmayı sağlayan veri türüne geleneksel olarak _mutex_ adı verilmektedir.

Standart Go kitaplığında karşılıklı dışlama [[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] veri türü ve ona ait iki metodla sağlanır:

- `Lock`
- `Unlock`

Karşılıklı dışlamayla çalıştırılacak bir kod öbeğini, `Inc` metodunda görüldüğü gibi, kodu `Lock` ve `Unlock` çağrılarıyla çevreleyerek tanımlayabiliriz.

Mutex kilidinin kaldırıldığından emin olmak için, `Value` metodunda görüldüğü gibi, `defer` yerleşik metodunu da kullanabiliriz.

.play concurrency/mutex-counter.go

* Alıştırma: Web Crawler

Bu uygulamada Go'nun eşzamanlılık yeteneklerini kullanarak bir "web crawler" uygulamasını paralelleştirmeyi öğreneceksiniz.

`Crawl` fonksiyonunu, URL'leri paralel olarak çekecek biçimde (aynı URL iki defa çekilmeyecek) düzenleyin.

_İpucu_: çekilen URL'leri bir eşlemde önbellekleyebiliriz, fakat salt bir eşlem eşzamanlı kullanımda güvenli değildir!

.play concurrency/exercise-web-crawler.go

* Bundan sonrası...

#appengine: İşe
#appengine: [[https://golang.org/doc/install/][Go yükleyerek]] başlayabilirsiniz.

#appengine: Go kurulumunuzu başarılı ile gerçekleştirdikten sonra,kaynaklar, bilgilendirici makaleler, videolar ve daha fazlasını bulabileceğiniz [[http://golang.org/doc/][Go Dokümantasyonu]]
#appengine: yola koyulmanız başlamanız için gerekli temel bilgiyi sunacaktır.

Go dilinin kurallarına uygun kod yazmaya başlamak için [[https://www.youtube.com/watch?v=XCsL89YtqCs][şu]] videoyu izleyebilir veya [[https://golang.org/doc/code.html][How to Write Go Code]] (Go Kodu Yazma) makalesini okuyabilirsiniz.

Standart kütüphane kullanımına dair yardıma ihtiyacınız olursa, [[https://golang.org/pkg/][ilgili paket referansına]] göz atınız. Dilin genel kullanımı ile ilgili bilgi edinmek isterseniz akıcı ve anlaşılır bir dille yazılmış [[https://golang.org/ref/spec][Language Spec]] ten (Dil Belirtimi) faydalanın.

Go’nun eşzamanlılık modeli üzerine daha detaylı bilgi edinmek için [[https://www.youtube.com/watch?v=f6kdp27TYZs][Go Eşzamanlılık Desenleri]] ([[https://talks.golang.org/2012/concurrency.slide][sunum]]) [[https://www.youtube.com/watch?v=QDDwwePbDtw][İleri Go Eşzamanlılık Desenleri]] ([[https://talks.golang.org/2013/advconc.slide][sunum]]) videolarını izleyiniz ve [[https://golang.org/doc/codewalk/sharemem/][Haberleşerek Hafızayı Paylaşma]] dokümanını okuyun.

Web uygulamaları yazmaya başlamak için, [[http://vimeo.com/53221558][Basit Bir Programlama Ortamı]] ([[https://talks.golang.org/2012/simple.slide][sunum]]) videosunu izleyiniz ve [[https://golang.org/doc/articles/wiki/][Web Uygulamaları Yazma]] rehberini okuyun.

[[https://golang.org/doc/codewalk/functions/][Go'da Birinci Sınıf Fonksiyonlar]], Go'daki fonksiyon türleri üzerine farklı bir bakış açısı sunacaktır.

[[https://blog.golang.org/][Go Blog]] da çok sayıda bilgilendirici makale bulabilirsiniz.

Daha fazlası için [[https://golang.org][golang.org]] adresini ziyaret ediniz.

* Çeviri hakkında

Go Turu çevirisi [[http://golang.org.tr][Go Programlama Dili Türkiye Topluluğu]] üyeleri tarafından yapılmıştır.  Çevirmen listesi ve nasıl katkı sağlayacağınız hakkında bilgi edinmek için lütfen [[https://github.com/golang-tr/tour/blob/master/README.md#te%C5%9Fekk%C3%BCrler][tıklayın]].
